// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net"
	"os"

	"github.com/Mellanox/k8s-rdma-shared-dev-plugin/pkg/types"
	mock "github.com/stretchr/testify/mock"
	"github.com/vishvananda/netlink"
	"google.golang.org/grpc"
	"k8s.io/kubelet/pkg/apis/deviceplugin/v1beta1"
)

// NewMockResourceServer creates a new instance of MockResourceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceServer {
	mock := &MockResourceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResourceServer is an autogenerated mock type for the ResourceServer type
type MockResourceServer struct {
	mock.Mock
}

type MockResourceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceServer) EXPECT() *MockResourceServer_Expecter {
	return &MockResourceServer_Expecter{mock: &_m.Mock}
}

// Allocate provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) Allocate(context1 context.Context, allocateRequest *v1beta1.AllocateRequest) (*v1beta1.AllocateResponse, error) {
	ret := _mock.Called(context1, allocateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Allocate")
	}

	var r0 *v1beta1.AllocateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.AllocateRequest) (*v1beta1.AllocateResponse, error)); ok {
		return returnFunc(context1, allocateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.AllocateRequest) *v1beta1.AllocateResponse); ok {
		r0 = returnFunc(context1, allocateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.AllocateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1beta1.AllocateRequest) error); ok {
		r1 = returnFunc(context1, allocateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceServer_Allocate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allocate'
type MockResourceServer_Allocate_Call struct {
	*mock.Call
}

// Allocate is a helper method to define mock.On call
//   - context1
//   - allocateRequest
func (_e *MockResourceServer_Expecter) Allocate(context1 interface{}, allocateRequest interface{}) *MockResourceServer_Allocate_Call {
	return &MockResourceServer_Allocate_Call{Call: _e.mock.On("Allocate", context1, allocateRequest)}
}

func (_c *MockResourceServer_Allocate_Call) Run(run func(context1 context.Context, allocateRequest *v1beta1.AllocateRequest)) *MockResourceServer_Allocate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.AllocateRequest))
	})
	return _c
}

func (_c *MockResourceServer_Allocate_Call) Return(allocateResponse *v1beta1.AllocateResponse, err error) *MockResourceServer_Allocate_Call {
	_c.Call.Return(allocateResponse, err)
	return _c
}

func (_c *MockResourceServer_Allocate_Call) RunAndReturn(run func(context1 context.Context, allocateRequest *v1beta1.AllocateRequest) (*v1beta1.AllocateResponse, error)) *MockResourceServer_Allocate_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicePluginOptions provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) GetDevicePluginOptions(context1 context.Context, empty *v1beta1.Empty) (*v1beta1.DevicePluginOptions, error) {
	ret := _mock.Called(context1, empty)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicePluginOptions")
	}

	var r0 *v1beta1.DevicePluginOptions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.Empty) (*v1beta1.DevicePluginOptions, error)); ok {
		return returnFunc(context1, empty)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.Empty) *v1beta1.DevicePluginOptions); ok {
		r0 = returnFunc(context1, empty)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.DevicePluginOptions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1beta1.Empty) error); ok {
		r1 = returnFunc(context1, empty)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceServer_GetDevicePluginOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicePluginOptions'
type MockResourceServer_GetDevicePluginOptions_Call struct {
	*mock.Call
}

// GetDevicePluginOptions is a helper method to define mock.On call
//   - context1
//   - empty
func (_e *MockResourceServer_Expecter) GetDevicePluginOptions(context1 interface{}, empty interface{}) *MockResourceServer_GetDevicePluginOptions_Call {
	return &MockResourceServer_GetDevicePluginOptions_Call{Call: _e.mock.On("GetDevicePluginOptions", context1, empty)}
}

func (_c *MockResourceServer_GetDevicePluginOptions_Call) Run(run func(context1 context.Context, empty *v1beta1.Empty)) *MockResourceServer_GetDevicePluginOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.Empty))
	})
	return _c
}

func (_c *MockResourceServer_GetDevicePluginOptions_Call) Return(devicePluginOptions *v1beta1.DevicePluginOptions, err error) *MockResourceServer_GetDevicePluginOptions_Call {
	_c.Call.Return(devicePluginOptions, err)
	return _c
}

func (_c *MockResourceServer_GetDevicePluginOptions_Call) RunAndReturn(run func(context1 context.Context, empty *v1beta1.Empty) (*v1beta1.DevicePluginOptions, error)) *MockResourceServer_GetDevicePluginOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreferredAllocation provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) GetPreferredAllocation(context1 context.Context, preferredAllocationRequest *v1beta1.PreferredAllocationRequest) (*v1beta1.PreferredAllocationResponse, error) {
	ret := _mock.Called(context1, preferredAllocationRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetPreferredAllocation")
	}

	var r0 *v1beta1.PreferredAllocationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.PreferredAllocationRequest) (*v1beta1.PreferredAllocationResponse, error)); ok {
		return returnFunc(context1, preferredAllocationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.PreferredAllocationRequest) *v1beta1.PreferredAllocationResponse); ok {
		r0 = returnFunc(context1, preferredAllocationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.PreferredAllocationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1beta1.PreferredAllocationRequest) error); ok {
		r1 = returnFunc(context1, preferredAllocationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceServer_GetPreferredAllocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreferredAllocation'
type MockResourceServer_GetPreferredAllocation_Call struct {
	*mock.Call
}

// GetPreferredAllocation is a helper method to define mock.On call
//   - context1
//   - preferredAllocationRequest
func (_e *MockResourceServer_Expecter) GetPreferredAllocation(context1 interface{}, preferredAllocationRequest interface{}) *MockResourceServer_GetPreferredAllocation_Call {
	return &MockResourceServer_GetPreferredAllocation_Call{Call: _e.mock.On("GetPreferredAllocation", context1, preferredAllocationRequest)}
}

func (_c *MockResourceServer_GetPreferredAllocation_Call) Run(run func(context1 context.Context, preferredAllocationRequest *v1beta1.PreferredAllocationRequest)) *MockResourceServer_GetPreferredAllocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.PreferredAllocationRequest))
	})
	return _c
}

func (_c *MockResourceServer_GetPreferredAllocation_Call) Return(preferredAllocationResponse *v1beta1.PreferredAllocationResponse, err error) *MockResourceServer_GetPreferredAllocation_Call {
	_c.Call.Return(preferredAllocationResponse, err)
	return _c
}

func (_c *MockResourceServer_GetPreferredAllocation_Call) RunAndReturn(run func(context1 context.Context, preferredAllocationRequest *v1beta1.PreferredAllocationRequest) (*v1beta1.PreferredAllocationResponse, error)) *MockResourceServer_GetPreferredAllocation_Call {
	_c.Call.Return(run)
	return _c
}

// ListAndWatch provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) ListAndWatch(empty *v1beta1.Empty, devicePlugin_ListAndWatchServer v1beta1.DevicePlugin_ListAndWatchServer) error {
	ret := _mock.Called(empty, devicePlugin_ListAndWatchServer)

	if len(ret) == 0 {
		panic("no return value specified for ListAndWatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*v1beta1.Empty, v1beta1.DevicePlugin_ListAndWatchServer) error); ok {
		r0 = returnFunc(empty, devicePlugin_ListAndWatchServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceServer_ListAndWatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAndWatch'
type MockResourceServer_ListAndWatch_Call struct {
	*mock.Call
}

// ListAndWatch is a helper method to define mock.On call
//   - empty
//   - devicePlugin_ListAndWatchServer
func (_e *MockResourceServer_Expecter) ListAndWatch(empty interface{}, devicePlugin_ListAndWatchServer interface{}) *MockResourceServer_ListAndWatch_Call {
	return &MockResourceServer_ListAndWatch_Call{Call: _e.mock.On("ListAndWatch", empty, devicePlugin_ListAndWatchServer)}
}

func (_c *MockResourceServer_ListAndWatch_Call) Run(run func(empty *v1beta1.Empty, devicePlugin_ListAndWatchServer v1beta1.DevicePlugin_ListAndWatchServer)) *MockResourceServer_ListAndWatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1beta1.Empty), args[1].(v1beta1.DevicePlugin_ListAndWatchServer))
	})
	return _c
}

func (_c *MockResourceServer_ListAndWatch_Call) Return(err error) *MockResourceServer_ListAndWatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceServer_ListAndWatch_Call) RunAndReturn(run func(empty *v1beta1.Empty, devicePlugin_ListAndWatchServer v1beta1.DevicePlugin_ListAndWatchServer) error) *MockResourceServer_ListAndWatch_Call {
	_c.Call.Return(run)
	return _c
}

// PreStartContainer provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) PreStartContainer(context1 context.Context, preStartContainerRequest *v1beta1.PreStartContainerRequest) (*v1beta1.PreStartContainerResponse, error) {
	ret := _mock.Called(context1, preStartContainerRequest)

	if len(ret) == 0 {
		panic("no return value specified for PreStartContainer")
	}

	var r0 *v1beta1.PreStartContainerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.PreStartContainerRequest) (*v1beta1.PreStartContainerResponse, error)); ok {
		return returnFunc(context1, preStartContainerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1beta1.PreStartContainerRequest) *v1beta1.PreStartContainerResponse); ok {
		r0 = returnFunc(context1, preStartContainerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.PreStartContainerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1beta1.PreStartContainerRequest) error); ok {
		r1 = returnFunc(context1, preStartContainerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceServer_PreStartContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreStartContainer'
type MockResourceServer_PreStartContainer_Call struct {
	*mock.Call
}

// PreStartContainer is a helper method to define mock.On call
//   - context1
//   - preStartContainerRequest
func (_e *MockResourceServer_Expecter) PreStartContainer(context1 interface{}, preStartContainerRequest interface{}) *MockResourceServer_PreStartContainer_Call {
	return &MockResourceServer_PreStartContainer_Call{Call: _e.mock.On("PreStartContainer", context1, preStartContainerRequest)}
}

func (_c *MockResourceServer_PreStartContainer_Call) Run(run func(context1 context.Context, preStartContainerRequest *v1beta1.PreStartContainerRequest)) *MockResourceServer_PreStartContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.PreStartContainerRequest))
	})
	return _c
}

func (_c *MockResourceServer_PreStartContainer_Call) Return(preStartContainerResponse *v1beta1.PreStartContainerResponse, err error) *MockResourceServer_PreStartContainer_Call {
	_c.Call.Return(preStartContainerResponse, err)
	return _c
}

func (_c *MockResourceServer_PreStartContainer_Call) RunAndReturn(run func(context1 context.Context, preStartContainerRequest *v1beta1.PreStartContainerRequest) (*v1beta1.PreStartContainerResponse, error)) *MockResourceServer_PreStartContainer_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) Restart() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceServer_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type MockResourceServer_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
func (_e *MockResourceServer_Expecter) Restart() *MockResourceServer_Restart_Call {
	return &MockResourceServer_Restart_Call{Call: _e.mock.On("Restart")}
}

func (_c *MockResourceServer_Restart_Call) Run(run func()) *MockResourceServer_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServer_Restart_Call) Return(err error) *MockResourceServer_Restart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceServer_Restart_Call) RunAndReturn(run func() error) *MockResourceServer_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockResourceServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockResourceServer_Expecter) Start() *MockResourceServer_Start_Call {
	return &MockResourceServer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockResourceServer_Start_Call) Run(run func()) *MockResourceServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServer_Start_Call) Return(err error) *MockResourceServer_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceServer_Start_Call) RunAndReturn(run func() error) *MockResourceServer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceServer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockResourceServer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockResourceServer_Expecter) Stop() *MockResourceServer_Stop_Call {
	return &MockResourceServer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockResourceServer_Stop_Call) Run(run func()) *MockResourceServer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServer_Stop_Call) Return(err error) *MockResourceServer_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceServer_Stop_Call) RunAndReturn(run func() error) *MockResourceServer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevices provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) UpdateDevices(pciNetDevices []types.PciNetDevice) {
	_mock.Called(pciNetDevices)
	return
}

// MockResourceServer_UpdateDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevices'
type MockResourceServer_UpdateDevices_Call struct {
	*mock.Call
}

// UpdateDevices is a helper method to define mock.On call
//   - pciNetDevices
func (_e *MockResourceServer_Expecter) UpdateDevices(pciNetDevices interface{}) *MockResourceServer_UpdateDevices_Call {
	return &MockResourceServer_UpdateDevices_Call{Call: _e.mock.On("UpdateDevices", pciNetDevices)}
}

func (_c *MockResourceServer_UpdateDevices_Call) Run(run func(pciNetDevices []types.PciNetDevice)) *MockResourceServer_UpdateDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.PciNetDevice))
	})
	return _c
}

func (_c *MockResourceServer_UpdateDevices_Call) Return() *MockResourceServer_UpdateDevices_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceServer_UpdateDevices_Call) RunAndReturn(run func(pciNetDevices []types.PciNetDevice)) *MockResourceServer_UpdateDevices_Call {
	_c.Run(run)
	return _c
}

// Watch provides a mock function for the type MockResourceServer
func (_mock *MockResourceServer) Watch() {
	_mock.Called()
	return
}

// MockResourceServer_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockResourceServer_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
func (_e *MockResourceServer_Expecter) Watch() *MockResourceServer_Watch_Call {
	return &MockResourceServer_Watch_Call{Call: _e.mock.On("Watch")}
}

func (_c *MockResourceServer_Watch_Call) Run(run func()) *MockResourceServer_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServer_Watch_Call) Return() *MockResourceServer_Watch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceServer_Watch_Call) RunAndReturn(run func()) *MockResourceServer_Watch_Call {
	_c.Run(run)
	return _c
}

// NewMockResourceManager creates a new instance of MockResourceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceManager {
	mock := &MockResourceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResourceManager is an autogenerated mock type for the ResourceManager type
type MockResourceManager struct {
	mock.Mock
}

type MockResourceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceManager) EXPECT() *MockResourceManager_Expecter {
	return &MockResourceManager_Expecter{mock: &_m.Mock}
}

// DiscoverHostDevices provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) DiscoverHostDevices() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiscoverHostDevices")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_DiscoverHostDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverHostDevices'
type MockResourceManager_DiscoverHostDevices_Call struct {
	*mock.Call
}

// DiscoverHostDevices is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) DiscoverHostDevices() *MockResourceManager_DiscoverHostDevices_Call {
	return &MockResourceManager_DiscoverHostDevices_Call{Call: _e.mock.On("DiscoverHostDevices")}
}

func (_c *MockResourceManager_DiscoverHostDevices_Call) Run(run func()) *MockResourceManager_DiscoverHostDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_DiscoverHostDevices_Call) Return(err error) *MockResourceManager_DiscoverHostDevices_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_DiscoverHostDevices_Call) RunAndReturn(run func() error) *MockResourceManager_DiscoverHostDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevices provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) GetDevices() []types.PciNetDevice {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []types.PciNetDevice
	if returnFunc, ok := ret.Get(0).(func() []types.PciNetDevice); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PciNetDevice)
		}
	}
	return r0
}

// MockResourceManager_GetDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevices'
type MockResourceManager_GetDevices_Call struct {
	*mock.Call
}

// GetDevices is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) GetDevices() *MockResourceManager_GetDevices_Call {
	return &MockResourceManager_GetDevices_Call{Call: _e.mock.On("GetDevices")}
}

func (_c *MockResourceManager_GetDevices_Call) Run(run func()) *MockResourceManager_GetDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_GetDevices_Call) Return(pciNetDevices []types.PciNetDevice) *MockResourceManager_GetDevices_Call {
	_c.Call.Return(pciNetDevices)
	return _c
}

func (_c *MockResourceManager_GetDevices_Call) RunAndReturn(run func() []types.PciNetDevice) *MockResourceManager_GetDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetFilteredDevices provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) GetFilteredDevices(devices []types.PciNetDevice, selector *types.Selectors) []types.PciNetDevice {
	ret := _mock.Called(devices, selector)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteredDevices")
	}

	var r0 []types.PciNetDevice
	if returnFunc, ok := ret.Get(0).(func([]types.PciNetDevice, *types.Selectors) []types.PciNetDevice); ok {
		r0 = returnFunc(devices, selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PciNetDevice)
		}
	}
	return r0
}

// MockResourceManager_GetFilteredDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFilteredDevices'
type MockResourceManager_GetFilteredDevices_Call struct {
	*mock.Call
}

// GetFilteredDevices is a helper method to define mock.On call
//   - devices
//   - selector
func (_e *MockResourceManager_Expecter) GetFilteredDevices(devices interface{}, selector interface{}) *MockResourceManager_GetFilteredDevices_Call {
	return &MockResourceManager_GetFilteredDevices_Call{Call: _e.mock.On("GetFilteredDevices", devices, selector)}
}

func (_c *MockResourceManager_GetFilteredDevices_Call) Run(run func(devices []types.PciNetDevice, selector *types.Selectors)) *MockResourceManager_GetFilteredDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.PciNetDevice), args[1].(*types.Selectors))
	})
	return _c
}

func (_c *MockResourceManager_GetFilteredDevices_Call) Return(pciNetDevices []types.PciNetDevice) *MockResourceManager_GetFilteredDevices_Call {
	_c.Call.Return(pciNetDevices)
	return _c
}

func (_c *MockResourceManager_GetFilteredDevices_Call) RunAndReturn(run func(devices []types.PciNetDevice, selector *types.Selectors) []types.PciNetDevice) *MockResourceManager_GetFilteredDevices_Call {
	_c.Call.Return(run)
	return _c
}

// InitServers provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) InitServers() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitServers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_InitServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitServers'
type MockResourceManager_InitServers_Call struct {
	*mock.Call
}

// InitServers is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) InitServers() *MockResourceManager_InitServers_Call {
	return &MockResourceManager_InitServers_Call{Call: _e.mock.On("InitServers")}
}

func (_c *MockResourceManager_InitServers_Call) Run(run func()) *MockResourceManager_InitServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_InitServers_Call) Return(err error) *MockResourceManager_InitServers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_InitServers_Call) RunAndReturn(run func() error) *MockResourceManager_InitServers_Call {
	_c.Call.Return(run)
	return _c
}

// PeriodicUpdate provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) PeriodicUpdate() func() {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for PeriodicUpdate")
	}

	var r0 func()
	if returnFunc, ok := ret.Get(0).(func() func()); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}
	return r0
}

// MockResourceManager_PeriodicUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeriodicUpdate'
type MockResourceManager_PeriodicUpdate_Call struct {
	*mock.Call
}

// PeriodicUpdate is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) PeriodicUpdate() *MockResourceManager_PeriodicUpdate_Call {
	return &MockResourceManager_PeriodicUpdate_Call{Call: _e.mock.On("PeriodicUpdate")}
}

func (_c *MockResourceManager_PeriodicUpdate_Call) Run(run func()) *MockResourceManager_PeriodicUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_PeriodicUpdate_Call) Return(fn func()) *MockResourceManager_PeriodicUpdate_Call {
	_c.Call.Return(fn)
	return _c
}

func (_c *MockResourceManager_PeriodicUpdate_Call) RunAndReturn(run func() func()) *MockResourceManager_PeriodicUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ReadConfig provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) ReadConfig() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_ReadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadConfig'
type MockResourceManager_ReadConfig_Call struct {
	*mock.Call
}

// ReadConfig is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) ReadConfig() *MockResourceManager_ReadConfig_Call {
	return &MockResourceManager_ReadConfig_Call{Call: _e.mock.On("ReadConfig")}
}

func (_c *MockResourceManager_ReadConfig_Call) Run(run func()) *MockResourceManager_ReadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_ReadConfig_Call) Return(err error) *MockResourceManager_ReadConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_ReadConfig_Call) RunAndReturn(run func() error) *MockResourceManager_ReadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RestartAllServers provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) RestartAllServers() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestartAllServers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_RestartAllServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartAllServers'
type MockResourceManager_RestartAllServers_Call struct {
	*mock.Call
}

// RestartAllServers is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) RestartAllServers() *MockResourceManager_RestartAllServers_Call {
	return &MockResourceManager_RestartAllServers_Call{Call: _e.mock.On("RestartAllServers")}
}

func (_c *MockResourceManager_RestartAllServers_Call) Run(run func()) *MockResourceManager_RestartAllServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_RestartAllServers_Call) Return(err error) *MockResourceManager_RestartAllServers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_RestartAllServers_Call) RunAndReturn(run func() error) *MockResourceManager_RestartAllServers_Call {
	_c.Call.Return(run)
	return _c
}

// StartAllServers provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) StartAllServers() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartAllServers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_StartAllServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAllServers'
type MockResourceManager_StartAllServers_Call struct {
	*mock.Call
}

// StartAllServers is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) StartAllServers() *MockResourceManager_StartAllServers_Call {
	return &MockResourceManager_StartAllServers_Call{Call: _e.mock.On("StartAllServers")}
}

func (_c *MockResourceManager_StartAllServers_Call) Run(run func()) *MockResourceManager_StartAllServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_StartAllServers_Call) Return(err error) *MockResourceManager_StartAllServers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_StartAllServers_Call) RunAndReturn(run func() error) *MockResourceManager_StartAllServers_Call {
	_c.Call.Return(run)
	return _c
}

// StopAllServers provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) StopAllServers() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StopAllServers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_StopAllServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAllServers'
type MockResourceManager_StopAllServers_Call struct {
	*mock.Call
}

// StopAllServers is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) StopAllServers() *MockResourceManager_StopAllServers_Call {
	return &MockResourceManager_StopAllServers_Call{Call: _e.mock.On("StopAllServers")}
}

func (_c *MockResourceManager_StopAllServers_Call) Run(run func()) *MockResourceManager_StopAllServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_StopAllServers_Call) Return(err error) *MockResourceManager_StopAllServers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_StopAllServers_Call) RunAndReturn(run func() error) *MockResourceManager_StopAllServers_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateConfigs provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) ValidateConfigs() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfigs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_ValidateConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfigs'
type MockResourceManager_ValidateConfigs_Call struct {
	*mock.Call
}

// ValidateConfigs is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) ValidateConfigs() *MockResourceManager_ValidateConfigs_Call {
	return &MockResourceManager_ValidateConfigs_Call{Call: _e.mock.On("ValidateConfigs")}
}

func (_c *MockResourceManager_ValidateConfigs_Call) Run(run func()) *MockResourceManager_ValidateConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_ValidateConfigs_Call) Return(err error) *MockResourceManager_ValidateConfigs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_ValidateConfigs_Call) RunAndReturn(run func() error) *MockResourceManager_ValidateConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRdmaSystemMode provides a mock function for the type MockResourceManager
func (_mock *MockResourceManager) ValidateRdmaSystemMode() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateRdmaSystemMode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceManager_ValidateRdmaSystemMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRdmaSystemMode'
type MockResourceManager_ValidateRdmaSystemMode_Call struct {
	*mock.Call
}

// ValidateRdmaSystemMode is a helper method to define mock.On call
func (_e *MockResourceManager_Expecter) ValidateRdmaSystemMode() *MockResourceManager_ValidateRdmaSystemMode_Call {
	return &MockResourceManager_ValidateRdmaSystemMode_Call{Call: _e.mock.On("ValidateRdmaSystemMode")}
}

func (_c *MockResourceManager_ValidateRdmaSystemMode_Call) Run(run func()) *MockResourceManager_ValidateRdmaSystemMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceManager_ValidateRdmaSystemMode_Call) Return(err error) *MockResourceManager_ValidateRdmaSystemMode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceManager_ValidateRdmaSystemMode_Call) RunAndReturn(run func() error) *MockResourceManager_ValidateRdmaSystemMode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceServerPort creates a new instance of MockResourceServerPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceServerPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceServerPort {
	mock := &MockResourceServerPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResourceServerPort is an autogenerated mock type for the ResourceServerPort type
type MockResourceServerPort struct {
	mock.Mock
}

type MockResourceServerPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceServerPort) EXPECT() *MockResourceServerPort_Expecter {
	return &MockResourceServerPort_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) Close(clientConn *grpc.ClientConn) {
	_mock.Called(clientConn)
	return
}

// MockResourceServerPort_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockResourceServerPort_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - clientConn
func (_e *MockResourceServerPort_Expecter) Close(clientConn interface{}) *MockResourceServerPort_Close_Call {
	return &MockResourceServerPort_Close_Call{Call: _e.mock.On("Close", clientConn)}
}

func (_c *MockResourceServerPort_Close_Call) Run(run func(clientConn *grpc.ClientConn)) *MockResourceServerPort_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.ClientConn))
	})
	return _c
}

func (_c *MockResourceServerPort_Close_Call) Return() *MockResourceServerPort_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceServerPort_Close_Call) RunAndReturn(run func(clientConn *grpc.ClientConn)) *MockResourceServerPort_Close_Call {
	_c.Run(run)
	return _c
}

// CreateServer provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) CreateServer() {
	_mock.Called()
	return
}

// MockResourceServerPort_CreateServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServer'
type MockResourceServerPort_CreateServer_Call struct {
	*mock.Call
}

// CreateServer is a helper method to define mock.On call
func (_e *MockResourceServerPort_Expecter) CreateServer() *MockResourceServerPort_CreateServer_Call {
	return &MockResourceServerPort_CreateServer_Call{Call: _e.mock.On("CreateServer")}
}

func (_c *MockResourceServerPort_CreateServer_Call) Run(run func()) *MockResourceServerPort_CreateServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServerPort_CreateServer_Call) Return() *MockResourceServerPort_CreateServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceServerPort_CreateServer_Call) RunAndReturn(run func()) *MockResourceServerPort_CreateServer_Call {
	_c.Run(run)
	return _c
}

// DeleteServer provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) DeleteServer() {
	_mock.Called()
	return
}

// MockResourceServerPort_DeleteServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServer'
type MockResourceServerPort_DeleteServer_Call struct {
	*mock.Call
}

// DeleteServer is a helper method to define mock.On call
func (_e *MockResourceServerPort_Expecter) DeleteServer() *MockResourceServerPort_DeleteServer_Call {
	return &MockResourceServerPort_DeleteServer_Call{Call: _e.mock.On("DeleteServer")}
}

func (_c *MockResourceServerPort_DeleteServer_Call) Run(run func()) *MockResourceServerPort_DeleteServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServerPort_DeleteServer_Call) Return() *MockResourceServerPort_DeleteServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceServerPort_DeleteServer_Call) RunAndReturn(run func()) *MockResourceServerPort_DeleteServer_Call {
	_c.Run(run)
	return _c
}

// GetClientConn provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) GetClientConn(s string) (*grpc.ClientConn, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetClientConn")
	}

	var r0 *grpc.ClientConn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*grpc.ClientConn, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *grpc.ClientConn); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceServerPort_GetClientConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientConn'
type MockResourceServerPort_GetClientConn_Call struct {
	*mock.Call
}

// GetClientConn is a helper method to define mock.On call
//   - s
func (_e *MockResourceServerPort_Expecter) GetClientConn(s interface{}) *MockResourceServerPort_GetClientConn_Call {
	return &MockResourceServerPort_GetClientConn_Call{Call: _e.mock.On("GetClientConn", s)}
}

func (_c *MockResourceServerPort_GetClientConn_Call) Run(run func(s string)) *MockResourceServerPort_GetClientConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockResourceServerPort_GetClientConn_Call) Return(clientConn *grpc.ClientConn, err error) *MockResourceServerPort_GetClientConn_Call {
	_c.Call.Return(clientConn, err)
	return _c
}

func (_c *MockResourceServerPort_GetClientConn_Call) RunAndReturn(run func(s string) (*grpc.ClientConn, error)) *MockResourceServerPort_GetClientConn_Call {
	_c.Call.Return(run)
	return _c
}

// GetServer provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) GetServer() *grpc.Server {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServer")
	}

	var r0 *grpc.Server
	if returnFunc, ok := ret.Get(0).(func() *grpc.Server); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Server)
		}
	}
	return r0
}

// MockResourceServerPort_GetServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServer'
type MockResourceServerPort_GetServer_Call struct {
	*mock.Call
}

// GetServer is a helper method to define mock.On call
func (_e *MockResourceServerPort_Expecter) GetServer() *MockResourceServerPort_GetServer_Call {
	return &MockResourceServerPort_GetServer_Call{Call: _e.mock.On("GetServer")}
}

func (_c *MockResourceServerPort_GetServer_Call) Run(run func()) *MockResourceServerPort_GetServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServerPort_GetServer_Call) Return(server *grpc.Server) *MockResourceServerPort_GetServer_Call {
	_c.Call.Return(server)
	return _c
}

func (_c *MockResourceServerPort_GetServer_Call) RunAndReturn(run func() *grpc.Server) *MockResourceServerPort_GetServer_Call {
	_c.Call.Return(run)
	return _c
}

// Listen provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) Listen(s string, s1 string) (net.Listener, error) {
	ret := _mock.Called(s, s1)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 net.Listener
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (net.Listener, error)); ok {
		return returnFunc(s, s1)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) net.Listener); ok {
		r0 = returnFunc(s, s1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(s, s1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceServerPort_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type MockResourceServerPort_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - s
//   - s1
func (_e *MockResourceServerPort_Expecter) Listen(s interface{}, s1 interface{}) *MockResourceServerPort_Listen_Call {
	return &MockResourceServerPort_Listen_Call{Call: _e.mock.On("Listen", s, s1)}
}

func (_c *MockResourceServerPort_Listen_Call) Run(run func(s string, s1 string)) *MockResourceServerPort_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockResourceServerPort_Listen_Call) Return(listener net.Listener, err error) *MockResourceServerPort_Listen_Call {
	_c.Call.Return(listener, err)
	return _c
}

func (_c *MockResourceServerPort_Listen_Call) RunAndReturn(run func(s string, s1 string) (net.Listener, error)) *MockResourceServerPort_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) Register(registrationClient v1beta1.RegistrationClient, registerRequest *v1beta1.RegisterRequest) error {
	ret := _mock.Called(registrationClient, registerRequest)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(v1beta1.RegistrationClient, *v1beta1.RegisterRequest) error); ok {
		r0 = returnFunc(registrationClient, registerRequest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceServerPort_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockResourceServerPort_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - registrationClient
//   - registerRequest
func (_e *MockResourceServerPort_Expecter) Register(registrationClient interface{}, registerRequest interface{}) *MockResourceServerPort_Register_Call {
	return &MockResourceServerPort_Register_Call{Call: _e.mock.On("Register", registrationClient, registerRequest)}
}

func (_c *MockResourceServerPort_Register_Call) Run(run func(registrationClient v1beta1.RegistrationClient, registerRequest *v1beta1.RegisterRequest)) *MockResourceServerPort_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1beta1.RegistrationClient), args[1].(*v1beta1.RegisterRequest))
	})
	return _c
}

func (_c *MockResourceServerPort_Register_Call) Return(err error) *MockResourceServerPort_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceServerPort_Register_Call) RunAndReturn(run func(registrationClient v1beta1.RegistrationClient, registerRequest *v1beta1.RegisterRequest) error) *MockResourceServerPort_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Serve provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) Serve(listener net.Listener) {
	_mock.Called(listener)
	return
}

// MockResourceServerPort_Serve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serve'
type MockResourceServerPort_Serve_Call struct {
	*mock.Call
}

// Serve is a helper method to define mock.On call
//   - listener
func (_e *MockResourceServerPort_Expecter) Serve(listener interface{}) *MockResourceServerPort_Serve_Call {
	return &MockResourceServerPort_Serve_Call{Call: _e.mock.On("Serve", listener)}
}

func (_c *MockResourceServerPort_Serve_Call) Run(run func(listener net.Listener)) *MockResourceServerPort_Serve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.Listener))
	})
	return _c
}

func (_c *MockResourceServerPort_Serve_Call) Return() *MockResourceServerPort_Serve_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceServerPort_Serve_Call) RunAndReturn(run func(listener net.Listener)) *MockResourceServerPort_Serve_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockResourceServerPort
func (_mock *MockResourceServerPort) Stop() {
	_mock.Called()
	return
}

// MockResourceServerPort_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockResourceServerPort_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockResourceServerPort_Expecter) Stop() *MockResourceServerPort_Stop_Call {
	return &MockResourceServerPort_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockResourceServerPort_Stop_Call) Run(run func()) *MockResourceServerPort_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceServerPort_Stop_Call) Return() *MockResourceServerPort_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceServerPort_Stop_Call) RunAndReturn(run func()) *MockResourceServerPort_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockSignalNotifier creates a new instance of MockSignalNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSignalNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSignalNotifier {
	mock := &MockSignalNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSignalNotifier is an autogenerated mock type for the SignalNotifier type
type MockSignalNotifier struct {
	mock.Mock
}

type MockSignalNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSignalNotifier) EXPECT() *MockSignalNotifier_Expecter {
	return &MockSignalNotifier_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function for the type MockSignalNotifier
func (_mock *MockSignalNotifier) Notify() chan os.Signal {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 chan os.Signal
	if returnFunc, ok := ret.Get(0).(func() chan os.Signal); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan os.Signal)
		}
	}
	return r0
}

// MockSignalNotifier_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type MockSignalNotifier_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
func (_e *MockSignalNotifier_Expecter) Notify() *MockSignalNotifier_Notify_Call {
	return &MockSignalNotifier_Notify_Call{Call: _e.mock.On("Notify")}
}

func (_c *MockSignalNotifier_Notify_Call) Run(run func()) *MockSignalNotifier_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSignalNotifier_Notify_Call) Return(signalCh chan os.Signal) *MockSignalNotifier_Notify_Call {
	_c.Call.Return(signalCh)
	return _c
}

func (_c *MockSignalNotifier_Notify_Call) RunAndReturn(run func() chan os.Signal) *MockSignalNotifier_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRdmaDeviceSpec creates a new instance of MockRdmaDeviceSpec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRdmaDeviceSpec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRdmaDeviceSpec {
	mock := &MockRdmaDeviceSpec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRdmaDeviceSpec is an autogenerated mock type for the RdmaDeviceSpec type
type MockRdmaDeviceSpec struct {
	mock.Mock
}

type MockRdmaDeviceSpec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRdmaDeviceSpec) EXPECT() *MockRdmaDeviceSpec_Expecter {
	return &MockRdmaDeviceSpec_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockRdmaDeviceSpec
func (_mock *MockRdmaDeviceSpec) Get(s string) []*v1beta1.DeviceSpec {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*v1beta1.DeviceSpec
	if returnFunc, ok := ret.Get(0).(func(string) []*v1beta1.DeviceSpec); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.DeviceSpec)
		}
	}
	return r0
}

// MockRdmaDeviceSpec_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRdmaDeviceSpec_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - s
func (_e *MockRdmaDeviceSpec_Expecter) Get(s interface{}) *MockRdmaDeviceSpec_Get_Call {
	return &MockRdmaDeviceSpec_Get_Call{Call: _e.mock.On("Get", s)}
}

func (_c *MockRdmaDeviceSpec_Get_Call) Run(run func(s string)) *MockRdmaDeviceSpec_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRdmaDeviceSpec_Get_Call) Return(deviceSpecs []*v1beta1.DeviceSpec) *MockRdmaDeviceSpec_Get_Call {
	_c.Call.Return(deviceSpecs)
	return _c
}

func (_c *MockRdmaDeviceSpec_Get_Call) RunAndReturn(run func(s string) []*v1beta1.DeviceSpec) *MockRdmaDeviceSpec_Get_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyRdmaSpec provides a mock function for the type MockRdmaDeviceSpec
func (_mock *MockRdmaDeviceSpec) VerifyRdmaSpec(deviceSpecs []*v1beta1.DeviceSpec) error {
	ret := _mock.Called(deviceSpecs)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRdmaSpec")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]*v1beta1.DeviceSpec) error); ok {
		r0 = returnFunc(deviceSpecs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRdmaDeviceSpec_VerifyRdmaSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyRdmaSpec'
type MockRdmaDeviceSpec_VerifyRdmaSpec_Call struct {
	*mock.Call
}

// VerifyRdmaSpec is a helper method to define mock.On call
//   - deviceSpecs
func (_e *MockRdmaDeviceSpec_Expecter) VerifyRdmaSpec(deviceSpecs interface{}) *MockRdmaDeviceSpec_VerifyRdmaSpec_Call {
	return &MockRdmaDeviceSpec_VerifyRdmaSpec_Call{Call: _e.mock.On("VerifyRdmaSpec", deviceSpecs)}
}

func (_c *MockRdmaDeviceSpec_VerifyRdmaSpec_Call) Run(run func(deviceSpecs []*v1beta1.DeviceSpec)) *MockRdmaDeviceSpec_VerifyRdmaSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*v1beta1.DeviceSpec))
	})
	return _c
}

func (_c *MockRdmaDeviceSpec_VerifyRdmaSpec_Call) Return(err error) *MockRdmaDeviceSpec_VerifyRdmaSpec_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRdmaDeviceSpec_VerifyRdmaSpec_Call) RunAndReturn(run func(deviceSpecs []*v1beta1.DeviceSpec) error) *MockRdmaDeviceSpec_VerifyRdmaSpec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPciNetDevice creates a new instance of MockPciNetDevice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPciNetDevice(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPciNetDevice {
	mock := &MockPciNetDevice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPciNetDevice is an autogenerated mock type for the PciNetDevice type
type MockPciNetDevice struct {
	mock.Mock
}

type MockPciNetDevice_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPciNetDevice) EXPECT() *MockPciNetDevice_Expecter {
	return &MockPciNetDevice_Expecter{mock: &_m.Mock}
}

// GetDeviceID provides a mock function for the type MockPciNetDevice
func (_mock *MockPciNetDevice) GetDeviceID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPciNetDevice_GetDeviceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceID'
type MockPciNetDevice_GetDeviceID_Call struct {
	*mock.Call
}

// GetDeviceID is a helper method to define mock.On call
func (_e *MockPciNetDevice_Expecter) GetDeviceID() *MockPciNetDevice_GetDeviceID_Call {
	return &MockPciNetDevice_GetDeviceID_Call{Call: _e.mock.On("GetDeviceID")}
}

func (_c *MockPciNetDevice_GetDeviceID_Call) Run(run func()) *MockPciNetDevice_GetDeviceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPciNetDevice_GetDeviceID_Call) Return(s string) *MockPciNetDevice_GetDeviceID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPciNetDevice_GetDeviceID_Call) RunAndReturn(run func() string) *MockPciNetDevice_GetDeviceID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDriver provides a mock function for the type MockPciNetDevice
func (_mock *MockPciNetDevice) GetDriver() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDriver")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPciNetDevice_GetDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDriver'
type MockPciNetDevice_GetDriver_Call struct {
	*mock.Call
}

// GetDriver is a helper method to define mock.On call
func (_e *MockPciNetDevice_Expecter) GetDriver() *MockPciNetDevice_GetDriver_Call {
	return &MockPciNetDevice_GetDriver_Call{Call: _e.mock.On("GetDriver")}
}

func (_c *MockPciNetDevice_GetDriver_Call) Run(run func()) *MockPciNetDevice_GetDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPciNetDevice_GetDriver_Call) Return(s string) *MockPciNetDevice_GetDriver_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPciNetDevice_GetDriver_Call) RunAndReturn(run func() string) *MockPciNetDevice_GetDriver_Call {
	_c.Call.Return(run)
	return _c
}

// GetIfName provides a mock function for the type MockPciNetDevice
func (_mock *MockPciNetDevice) GetIfName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIfName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPciNetDevice_GetIfName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIfName'
type MockPciNetDevice_GetIfName_Call struct {
	*mock.Call
}

// GetIfName is a helper method to define mock.On call
func (_e *MockPciNetDevice_Expecter) GetIfName() *MockPciNetDevice_GetIfName_Call {
	return &MockPciNetDevice_GetIfName_Call{Call: _e.mock.On("GetIfName")}
}

func (_c *MockPciNetDevice_GetIfName_Call) Run(run func()) *MockPciNetDevice_GetIfName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPciNetDevice_GetIfName_Call) Return(s string) *MockPciNetDevice_GetIfName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPciNetDevice_GetIfName_Call) RunAndReturn(run func() string) *MockPciNetDevice_GetIfName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinkType provides a mock function for the type MockPciNetDevice
func (_mock *MockPciNetDevice) GetLinkType() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLinkType")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPciNetDevice_GetLinkType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinkType'
type MockPciNetDevice_GetLinkType_Call struct {
	*mock.Call
}

// GetLinkType is a helper method to define mock.On call
func (_e *MockPciNetDevice_Expecter) GetLinkType() *MockPciNetDevice_GetLinkType_Call {
	return &MockPciNetDevice_GetLinkType_Call{Call: _e.mock.On("GetLinkType")}
}

func (_c *MockPciNetDevice_GetLinkType_Call) Run(run func()) *MockPciNetDevice_GetLinkType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPciNetDevice_GetLinkType_Call) Return(s string) *MockPciNetDevice_GetLinkType_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPciNetDevice_GetLinkType_Call) RunAndReturn(run func() string) *MockPciNetDevice_GetLinkType_Call {
	_c.Call.Return(run)
	return _c
}

// GetPciAddr provides a mock function for the type MockPciNetDevice
func (_mock *MockPciNetDevice) GetPciAddr() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPciAddr")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPciNetDevice_GetPciAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPciAddr'
type MockPciNetDevice_GetPciAddr_Call struct {
	*mock.Call
}

// GetPciAddr is a helper method to define mock.On call
func (_e *MockPciNetDevice_Expecter) GetPciAddr() *MockPciNetDevice_GetPciAddr_Call {
	return &MockPciNetDevice_GetPciAddr_Call{Call: _e.mock.On("GetPciAddr")}
}

func (_c *MockPciNetDevice_GetPciAddr_Call) Run(run func()) *MockPciNetDevice_GetPciAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPciNetDevice_GetPciAddr_Call) Return(s string) *MockPciNetDevice_GetPciAddr_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPciNetDevice_GetPciAddr_Call) RunAndReturn(run func() string) *MockPciNetDevice_GetPciAddr_Call {
	_c.Call.Return(run)
	return _c
}

// GetRdmaSpec provides a mock function for the type MockPciNetDevice
func (_mock *MockPciNetDevice) GetRdmaSpec() []*v1beta1.DeviceSpec {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRdmaSpec")
	}

	var r0 []*v1beta1.DeviceSpec
	if returnFunc, ok := ret.Get(0).(func() []*v1beta1.DeviceSpec); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.DeviceSpec)
		}
	}
	return r0
}

// MockPciNetDevice_GetRdmaSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRdmaSpec'
type MockPciNetDevice_GetRdmaSpec_Call struct {
	*mock.Call
}

// GetRdmaSpec is a helper method to define mock.On call
func (_e *MockPciNetDevice_Expecter) GetRdmaSpec() *MockPciNetDevice_GetRdmaSpec_Call {
	return &MockPciNetDevice_GetRdmaSpec_Call{Call: _e.mock.On("GetRdmaSpec")}
}

func (_c *MockPciNetDevice_GetRdmaSpec_Call) Run(run func()) *MockPciNetDevice_GetRdmaSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPciNetDevice_GetRdmaSpec_Call) Return(deviceSpecs []*v1beta1.DeviceSpec) *MockPciNetDevice_GetRdmaSpec_Call {
	_c.Call.Return(deviceSpecs)
	return _c
}

func (_c *MockPciNetDevice_GetRdmaSpec_Call) RunAndReturn(run func() []*v1beta1.DeviceSpec) *MockPciNetDevice_GetRdmaSpec_Call {
	_c.Call.Return(run)
	return _c
}

// GetVendor provides a mock function for the type MockPciNetDevice
func (_mock *MockPciNetDevice) GetVendor() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVendor")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPciNetDevice_GetVendor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVendor'
type MockPciNetDevice_GetVendor_Call struct {
	*mock.Call
}

// GetVendor is a helper method to define mock.On call
func (_e *MockPciNetDevice_Expecter) GetVendor() *MockPciNetDevice_GetVendor_Call {
	return &MockPciNetDevice_GetVendor_Call{Call: _e.mock.On("GetVendor")}
}

func (_c *MockPciNetDevice_GetVendor_Call) Run(run func()) *MockPciNetDevice_GetVendor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPciNetDevice_GetVendor_Call) Return(s string) *MockPciNetDevice_GetVendor_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPciNetDevice_GetVendor_Call) RunAndReturn(run func() string) *MockPciNetDevice_GetVendor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeviceSelector creates a new instance of MockDeviceSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeviceSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeviceSelector {
	mock := &MockDeviceSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDeviceSelector is an autogenerated mock type for the DeviceSelector type
type MockDeviceSelector struct {
	mock.Mock
}

type MockDeviceSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceSelector) EXPECT() *MockDeviceSelector_Expecter {
	return &MockDeviceSelector_Expecter{mock: &_m.Mock}
}

// Filter provides a mock function for the type MockDeviceSelector
func (_mock *MockDeviceSelector) Filter(pciNetDevices []types.PciNetDevice) []types.PciNetDevice {
	ret := _mock.Called(pciNetDevices)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 []types.PciNetDevice
	if returnFunc, ok := ret.Get(0).(func([]types.PciNetDevice) []types.PciNetDevice); ok {
		r0 = returnFunc(pciNetDevices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PciNetDevice)
		}
	}
	return r0
}

// MockDeviceSelector_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type MockDeviceSelector_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - pciNetDevices
func (_e *MockDeviceSelector_Expecter) Filter(pciNetDevices interface{}) *MockDeviceSelector_Filter_Call {
	return &MockDeviceSelector_Filter_Call{Call: _e.mock.On("Filter", pciNetDevices)}
}

func (_c *MockDeviceSelector_Filter_Call) Run(run func(pciNetDevices []types.PciNetDevice)) *MockDeviceSelector_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.PciNetDevice))
	})
	return _c
}

func (_c *MockDeviceSelector_Filter_Call) Return(pciNetDevices1 []types.PciNetDevice) *MockDeviceSelector_Filter_Call {
	_c.Call.Return(pciNetDevices1)
	return _c
}

func (_c *MockDeviceSelector_Filter_Call) RunAndReturn(run func(pciNetDevices []types.PciNetDevice) []types.PciNetDevice) *MockDeviceSelector_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetlinkManager creates a new instance of MockNetlinkManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetlinkManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetlinkManager {
	mock := &MockNetlinkManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNetlinkManager is an autogenerated mock type for the NetlinkManager type
type MockNetlinkManager struct {
	mock.Mock
}

type MockNetlinkManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetlinkManager) EXPECT() *MockNetlinkManager_Expecter {
	return &MockNetlinkManager_Expecter{mock: &_m.Mock}
}

// LinkByName provides a mock function for the type MockNetlinkManager
func (_mock *MockNetlinkManager) LinkByName(s string) (netlink.Link, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for LinkByName")
	}

	var r0 netlink.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (netlink.Link, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNetlinkManager_LinkByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkByName'
type MockNetlinkManager_LinkByName_Call struct {
	*mock.Call
}

// LinkByName is a helper method to define mock.On call
//   - s
func (_e *MockNetlinkManager_Expecter) LinkByName(s interface{}) *MockNetlinkManager_LinkByName_Call {
	return &MockNetlinkManager_LinkByName_Call{Call: _e.mock.On("LinkByName", s)}
}

func (_c *MockNetlinkManager_LinkByName_Call) Run(run func(s string)) *MockNetlinkManager_LinkByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetlinkManager_LinkByName_Call) Return(link netlink.Link, err error) *MockNetlinkManager_LinkByName_Call {
	_c.Call.Return(link, err)
	return _c
}

func (_c *MockNetlinkManager_LinkByName_Call) RunAndReturn(run func(s string) (netlink.Link, error)) *MockNetlinkManager_LinkByName_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetUp provides a mock function for the type MockNetlinkManager
func (_mock *MockNetlinkManager) LinkSetUp(link netlink.Link) error {
	ret := _mock.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetUp")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = returnFunc(link)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNetlinkManager_LinkSetUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetUp'
type MockNetlinkManager_LinkSetUp_Call struct {
	*mock.Call
}

// LinkSetUp is a helper method to define mock.On call
//   - link
func (_e *MockNetlinkManager_Expecter) LinkSetUp(link interface{}) *MockNetlinkManager_LinkSetUp_Call {
	return &MockNetlinkManager_LinkSetUp_Call{Call: _e.mock.On("LinkSetUp", link)}
}

func (_c *MockNetlinkManager_LinkSetUp_Call) Run(run func(link netlink.Link)) *MockNetlinkManager_LinkSetUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(netlink.Link))
	})
	return _c
}

func (_c *MockNetlinkManager_LinkSetUp_Call) Return(err error) *MockNetlinkManager_LinkSetUp_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetlinkManager_LinkSetUp_Call) RunAndReturn(run func(link netlink.Link) error) *MockNetlinkManager_LinkSetUp_Call {
	_c.Call.Return(run)
	return _c
}
